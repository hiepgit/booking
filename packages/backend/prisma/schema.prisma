// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  ONLINE
  OFFLINE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  VNPAY
  MOMO
  CASH
  BANK_TRANSFER
}

enum ScheduleStatus {
  AVAILABLE
  BUSY
  UNAVAILABLE
}

enum NotificationType {
  APPOINTMENT_REMINDER
  APPOINTMENT_CONFIRMED
  APPOINTMENT_CANCELLED
  APPOINTMENT_RESCHEDULED
  APPOINTMENT_COMPLETED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  PAYMENT_REFUNDED
  DOCTOR_AVAILABLE
  DOCTOR_UNAVAILABLE
  NEW_APPOINTMENT_REQUEST
  SYSTEM_MAINTENANCE
  SYSTEM_UPDATE
  WELCOME
  VERIFICATION_REMINDER
  GENERAL
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  PUSH
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ReminderType {
  APPOINTMENT_24H
  APPOINTMENT_1H
  APPOINTMENT_15M
  PAYMENT_DUE
  VERIFICATION_PENDING
}

enum MedicalRecordType {
  PRESCRIPTION
  LAB_RESULT
  DIAGNOSIS
  TREATMENT_PLAN
}

// Main Models

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  phone        String?  @unique
  passwordHash String?  @map("password")
  role         UserRole @default(PATIENT)
  isActive     Boolean  @default(true)
  isVerified   Boolean  @default(false)

  // Profile information
  firstName   String
  lastName    String
  avatar      String?
  dateOfBirth DateTime?
  gender      Gender?
  address     String?

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient                  Patient?
  doctor                   Doctor?
  notifications            Notification[]
  notificationPreferences  NotificationPreference[]
  sentMessages             Message[] @relation("SentMessages")
  receivedMessages         Message[] @relation("ReceivedMessages")

  @@map("users")
  @@index([email])
  @@index([phone])
  @@index([role])
  @@index([isActive])
  @@index([isVerified])
}

model Patient {
  id               String   @id @default(cuid())
  userId           String   @unique

  // Medical information
  bloodType        String?
  allergies        String?
  emergencyContact String?
  insuranceNumber  String?

  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments    Appointment[]
  medicalRecords  MedicalRecord[]
  payments        Payment[]
  reviews         Review[]

  @@map("patients")
  @@index([bloodType])
  @@index([insuranceNumber])
}

model Doctor {
  id                String   @id @default(cuid())
  userId            String   @unique

  // Professional information
  licenseNumber     String   @unique
  specialtyId       String
  experience        Int
  biography         String?
  consultationFee   Decimal  @db.Decimal(10, 2)

  // Rating system
  averageRating     Float    @default(0)
  totalReviews      Int      @default(0)

  // Availability
  isAvailable       Boolean  @default(true)

  // Relations
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty         Specialty @relation(fields: [specialtyId], references: [id])
  appointments      Appointment[]
  schedules         Schedule[]
  medicalRecords    MedicalRecord[]
  reviews           Review[]
  clinicDoctors     ClinicDoctor[]

  @@map("doctors")
  @@index([specialtyId])
  @@index([averageRating])
  @@index([experience])
  @@index([isAvailable])
  @@index([consultationFee])
}

model Specialty {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?

  // Relations
  doctors     Doctor[]

  @@map("specialties")
  @@index([name])
}

model Clinic {
  id          String   @id @default(cuid())
  name        String
  address     String
  phone       String
  email       String?

  // Location
  latitude    Float?
  longitude   Float?

  // Operating hours
  openTime    String   // HH:mm format
  closeTime   String   // HH:mm format

  // Images and description
  images      String[] // Array of image URLs
  description String?

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  clinicDoctors ClinicDoctor[]
  appointments  Appointment[]

  @@map("clinics")
  @@index([name])
  @@index([latitude, longitude])
  @@index([openTime, closeTime])
}

model ClinicDoctor {
  id        String   @id @default(cuid())
  clinicId  String
  doctorId  String

  // Working schedule at this clinic
  workingDays String[] // ["MONDAY", "TUESDAY", etc.]
  startTime   String   // HH:mm
  endTime     String   // HH:mm

  // Relations
  clinic    Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  doctor    Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([clinicId, doctorId])
  @@map("clinic_doctors")
  @@index([clinicId])
  @@index([doctorId])
  @@index([workingDays])
}

model Schedule {
  id        String         @id @default(cuid())
  doctorId  String

  // Date and time
  date      DateTime       @db.Date
  startTime String         // HH:mm format
  endTime   String         // HH:mm format

  // Status
  status    ScheduleStatus @default(AVAILABLE)

  // Additional info
  note      String?

  // Relations
  doctor      Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@unique([doctorId, date, startTime])
  @@map("schedules")
  @@index([doctorId, date])
  @@index([date, startTime])
  @@index([status])
  @@index([doctorId, date, status])
}

model Appointment {
  id              String            @id @default(cuid())
  patientId       String
  doctorId        String
  clinicId        String?
  scheduleId      String?

  // Appointment details
  appointmentDate DateTime
  startTime       String            // HH:mm format
  endTime         String            // HH:mm format
  type            AppointmentType   @default(OFFLINE)
  status          AppointmentStatus @default(PENDING)

  // Patient information
  symptoms        String?
  notes           String?

  // Meeting information (for online consultations)
  meetingUrl      String?
  meetingId       String?

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  patient         Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor          Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  clinic          Clinic? @relation(fields: [clinicId], references: [id])
  schedule        Schedule? @relation(fields: [scheduleId], references: [id])
  payment         Payment?
  medicalRecord   MedicalRecord?
  notifications   Notification[]

  @@map("appointments")
  @@index([patientId])
  @@index([doctorId])
  @@index([clinicId])
  @@index([appointmentDate])
  @@index([status])
  @@index([type])
  @@index([patientId, status])
  @@index([doctorId, appointmentDate])
  @@index([appointmentDate, startTime])
}

model Payment {
  id              String        @id @default(cuid())
  appointmentId   String        @unique
  patientId       String

  // Payment details
  amount          Decimal       @db.Decimal(10, 2)
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)

  // Gateway information
  transactionId   String?       @unique
  gatewayResponse Json?

  // Timestamps
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  appointment     Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient         Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("payments")
  @@index([patientId])
  @@index([status])
  @@index([method])
  @@index([transactionId])
  @@index([createdAt])
  @@index([patientId, status])
}

model MedicalRecord {
  id              String             @id @default(cuid())
  appointmentId   String             @unique
  patientId       String
  doctorId        String

  // Record details
  type            MedicalRecordType  @default(DIAGNOSIS)
  diagnosis       String?
  prescription    String?
  labResults      String?
  treatmentPlan   String?
  notes           String?

  // Files
  attachments     String[]           // URLs to files

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  appointment     Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient         Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor          Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("medical_records")
  @@index([patientId])
  @@index([doctorId])
  @@index([type])
  @@index([createdAt])
  @@index([patientId, type])
}

model Review {
  id          String   @id @default(cuid())
  patientId   String
  doctorId    String

  // Review details
  rating      Int      // 1-5 stars
  comment     String?

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient     Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor      Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([patientId, doctorId])
  @@map("reviews")
  @@index([doctorId])
  @@index([rating])
  @@index([createdAt])
  @@index([doctorId, rating])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String

  // Notification details
  type      NotificationType
  title     String
  message   String
  data      Json?            // Additional data for the notification

  // Delivery settings
  channels  NotificationChannel[] // Which channels to send through
  priority  NotificationPriority @default(NORMAL)

  // Scheduling
  scheduledFor DateTime?      // When to send (for scheduled notifications)
  sentAt       DateTime?      // When actually sent

  // Status tracking
  isRead       Boolean       @default(false)
  isDelivered  Boolean       @default(false)
  deliveryAttempts Int       @default(0)

  // Related entities
  appointmentId String?      // Related appointment if applicable

  // Timestamps
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointment  Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  logs         NotificationLog[]

  @@map("notifications")
  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([isDelivered])
  @@index([priority])
  @@index([scheduledFor])
  @@index([createdAt])
  @@index([userId, isRead])
  @@index([userId, type])
  @@index([appointmentId])
}

model NotificationPreference {
  id     String @id @default(cuid())
  userId String

  // Notification type preferences
  type     NotificationType
  channels NotificationChannel[] // Preferred channels for this type
  enabled  Boolean              @default(true)

  // Reminder preferences
  reminderTiming Int[]           // Minutes before appointment [1440, 60, 15] for 24h, 1h, 15m

  // Quiet hours
  quietHoursStart String?        // "22:00" format
  quietHoursEnd   String?        // "08:00" format
  timezone        String         @default("Asia/Ho_Chi_Minh")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("notification_preferences")
  @@index([userId])
  @@index([type])
  @@index([enabled])
}

model NotificationTemplate {
  id          String           @id @default(cuid())
  type        NotificationType
  channel     NotificationChannel
  language    String           @default("vi") // vi, en

  // Template content
  subject     String?          // For email/SMS
  title       String           // For in-app notifications
  body        String           // Template with placeholders
  htmlBody    String?          // HTML version for emails

  // Template variables info
  variables   Json?            // Available variables and their descriptions

  // Status
  isActive    Boolean          @default(true)
  version     Int              @default(1)

  // Timestamps
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([type, channel, language])
  @@map("notification_templates")
  @@index([type])
  @@index([channel])
  @@index([isActive])
  @@index([language])
}

model NotificationLog {
  id             String              @id @default(cuid())
  notificationId String

  // Delivery details
  channel        NotificationChannel
  recipient      String              // Email, phone, or user ID
  status         String              // sent, delivered, failed, bounced
  errorMessage   String?

  // External service details
  externalId     String?             // ID from email/SMS service
  deliveredAt    DateTime?
  readAt         DateTime?           // For email open tracking

  // Timestamps
  createdAt      DateTime            @default(now())

  // Relations
  notification   Notification        @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@map("notification_logs")
  @@index([notificationId])
  @@index([channel])
  @@index([status])
  @@index([createdAt])
  @@index([recipient])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String

  // Message details
  content    String
  messageType String  @default("text") // text, image, file
  fileUrl    String?

  // Status
  isRead     Boolean  @default(false)

  // Timestamps
  createdAt  DateTime @default(now())

  // Relations
  sender     User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
  @@index([createdAt])
  @@index([senderId, receiverId])
  @@index([receiverId, isRead])
}

// OTP requests for registration and password reset
enum OtpPurpose {
  REGISTER
  RESET
}

model OtpRequest {
  id           String     @id @default(cuid())
  email        String
  otpHash      String
  attemptCount Int        @default(0)
  expiresAt    DateTime
  purpose      OtpPurpose @default(REGISTER)
  createdAt    DateTime   @default(now())

  @@unique([email, purpose])
  @@map("otp_requests")
  @@index([email])
  @@index([expiresAt])
  @@index([email, purpose])
}

// System configuration tables
model AppConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("app_configs")
  @@index([key])
}

// Audit log for important actions
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  tableName   String?
  recordId    String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?

  // Timestamp
  createdAt   DateTime @default(now())

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([tableName])
  @@index([createdAt])
  @@index([userId, action])
  @@index([tableName, recordId])
}
